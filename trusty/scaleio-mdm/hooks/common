#!/bin/bash
if [ -z "$my_dir" ]; then my_dir="$(dirname "$0")"; fi
set -eu

function convert-name {
    echo ${1//[-\/]/_}
}

function resolve-address() {
    python -c "import socket; print(sorted(socket.gethostbyname_ex('$1')[2])[0])"
}

function resolve-addresses() {
    python -c "import socket; print(','.join(sorted(socket.gethostbyname_ex('$1')[2])))"
}

function get-ips-by-interfaces() {
    local ifaces="$1"
    local all_ips=''
    for iface in $(echo $ifaces | tr ',' ' ') ; do
        ips=`echo $(ip addr show dev $iface | awk '/inet /{split($2,a,"/"); print a[1]}')`
        all_ips="$all_ips $ips"
    done
    all_ips=($all_ips)
    (IFS=,; echo "${all_ips[*]}")
}

INTERNAL_IFACE=`config-get internal-iface`
if [ -n "$INTERNAL_IFACE" ] ; then
    MY_INTERNAL_IP=`get-ips-by-interfaces $INTERNAL_IFACE`
else
    MY_INTERNAL_IP=`unit-get private-address`
    MY_INTERNAL_IP=`resolve-addresses "$MY_INTERNAL_IP"`
fi
MY_NAME=$(convert-name $JUJU_UNIT_NAME)
MY_PASSWORD=`config-get password`
# MY_MDMS used in calls to scli. so set it to management ips.
MY_MDMS=`leader-get mdm_management_ips`
if [ -z "$MY_MDMS" ]; then MY_MDMS='127.0.0.1'; fi
MANAGEMENT_IFACE=`config-get management-iface`
if [ -n "$MANAGEMENT_IFACE" ] ; then
    MY_MANAGEMENT_IP=`get-ips-by-interfaces $INTERNAL_IFACE`
else
    MY_MANAGEMENT_IP=$MY_INTERNAL_IP
fi

function server-cmd {
    juju-log "Running server-cmd with '$1'"
    set +e
    FACTER_mdm_ips=$MY_MDMS puppet apply -e "$1" --detailed-exitcodes
    local exit_code=$?
    if [[ $exit_code == 0 || $exit_code == 2 ]]; then
        juju-log "The run succeeded. Exit code is $exit_code."
    else
        juju-log "The run failed. Exit code is $exit_code."
        exit 1
    fi
    set -e
}

function cluster-cmd {
    server-cmd "scaleio::login {'login': password=>$MY_PASSWORD} -> $1"
}

function log-relation {
    local remote_name=${convert-name $JUJU_REMOTE_UNIT}
    local remote_internal_ip=$(relation-get internal_ip_$remote_name)
    juju-log "$1: my name is $MY_NAME, relation is $remote_name, $remote_internal_ip"
}

function relation-set-all {
    local leader=`is-leader`
    if [[ "$leader" != 'True' ]]; then exit; fi

    local mdm_internal_ips=`leader-get mdm_internal_ips`
    local mdm_internal_ips=${mdm_internal_ips%,}
    local mdm_management_ips=`leader-get mdm_management_ips`
    local mdm_management_ips=${mdm_management_ips%,}

    local rids=`relation-ids scaleio-mdm`
    if [ -n "$rids" ]; then
        juju-log "ScaleIO MDM notifies SDCs and Gateways about changes: $rids"
        for rid in $rids; do
            relation-set -r $rid mdm_internal_ips=$mdm_internal_ips
            relation-set -r $rid mdm_management_ips=$mdm_management_ips
        done
    fi
}

function update-cluster-options {
    # The function should be called by leader only

    local val=`config-get license-file-path`
    if [ -n "$val" ] ; then
        cluster-cmd "scaleio::cluster { 'cluster': license_file_path=>'$val' }"
    fi

    local val1=`config-get capacity-high-alert-threshold`
    local val2=`config-get capacity-critical-alert-threshold`
    if [[ -n "$val1" && -n "$val2" ]] ; then
        cluster-cmd "scaleio::cluster { 'cluster': capacity_high_alert_threshold=>'$val1', capacity_critical_alert_threshold=>'$val2' }"
    fi
}
