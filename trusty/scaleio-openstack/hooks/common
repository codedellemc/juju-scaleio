#!/bin/bash
my_dir="$(dirname "$0")"
set -eu

. "$my_dir/common-cinder"
. "$my_dir/common-nova"

function convert-name {
  echo ${1//[-\/]/_}
}

function server-cmd {
  juju-log "Running server-cmd with '$1'"
  local ignore_errors=${2:-0}
  set +e
  puppet apply -e "$1" --detailed-exitcodes
  local exit_code=$?
  if [[ $exit_code == 0 || $exit_code == 2 ]]; then
    juju-log "The run succeeded. Exit code is $exit_code."
  else
    juju-log "The run failed. Exit code is $exit_code."
    [[ $ignore_errors != 0 ]] || exit 1
  fi
  set -e
}

function log-relation {
  local remote_name=$(convert-name $JUJU_REMOTE_UNIT)
  local remote_ip=`relation-get private-address`
  juju-log "$1: $remote_name, $remote_ip"
}

function update-relations {
  rids=`relation-ids storage-backend`
  for rid in $rids ; do
    if [ -n "`relation-list -r $rid`" ] ; then
      update-cinder $rid
    fi
  done

  rids=`relation-ids ephemeral-backend`
  for rid in $rids ; do
    if [ -n "`relation-list -r $rid`" ] ; then
      update-nova $rid
    fi
  done
}

function update-config {
  service_name=$1
  service_conf=$2
  tmp_cfg=$3

  declare -A values=()
  while read line ; do
    if echo $line | grep -qe '^\[.*\]$' ; then
      # section
      section_name=`echo $line | sed -e "s/[][]//g"`
    elif echo $line | grep -ve "^\#.*" | grep -q '=' ; then
      # split line with first '='
      IFS='=' read -r key value <<< "$line"
      # trim spaces
      key=$(echo $key)
      value=$(echo $value)
      if [ -n "$key" ] ; then
        values[$section_name]=${values[$section_name]:-}
        values[$section_name]="${values[$section_name]}[\"$key\", \"$value\"],"
      fi
    fi
  done < "$tmp_cfg"

  conf="{\"$service_name\": {\"$service_conf\": {\"sections\": {"
  for section_name in "${!values[@]}" ; do
    params=${values[$section_name]}
    params=${params%,}
    conf="$conf \"$section_name\": [$params],"
  done
  conf=${conf%,}
  conf=$conf'}}}}'
  echo "$conf"
}
