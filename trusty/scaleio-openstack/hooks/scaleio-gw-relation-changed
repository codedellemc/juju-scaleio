#!/bin/bash -x
my_dir="$(dirname "$0")"
. "$my_dir/common"

log-relation "ScaleIO GW joining"
password=`relation-get password`
remote_ip=`relation-get private-address`
protection_domains=`config-get protection-domains`
storage_pools=`config-get storage-pools`

if [ -z "$password" ]; then exit; fi


# Set an option in an INI file
# iniset config-file section option value
function ini_set() {
    local file="/etc/nova/nova-compute.conf"
    local section="libvirt"
    local option=$1
    local value=$2
    touch $file
    if ! grep -q "^\[$section\]" "$file"; then
        # Add section at the end
        bash -c "echo -e \"\n[$section]\" >>\"$file\""
    fi
    if [ -z `sed -ne "/^\[$section\]/,/^\[.*\]/ { /^$option[ \t]*=/ p; }" $file` ] ; then
        # Add it
        sed -i -e "/^\[$section\]/ a\\
$option = $value
" "$file"
    else
        # Replace it
        sed -i -e "/^\[$section\]/,/^\[.*\]/ s|^\($option[ \t]*=[ \t]*\).*$|\1$value|" "$file"
    fi
}

function apply_keys() {
  return

  local nova_path=`python -c 'import nova; import os; path = os.path.dirname(nova.__file__); print(path)' 2>/dev/null`
  if [ -z "$nova_path" ] ; then
    return 0
  fi

  local public_key=`relation-get public-key`
  local private_key=`relation-get private-key`
  if [[ -z "$public_key" || -z "$private_key" ]] ; then
    mkdir -p /root/.ssh
    rm -f /root/.ssh/id_rsa /root/.ssh/id_rsa.pub
    ssh-keygen -t rsa -f /root/.ssh/id_rsa -q -N ""

    private_key=""
    while read line ; do private_key=$private_key$line ; done < /root/.ssh/id_rsa
    public_key=$(cat /root/.ssh/id_rsa.pub)
    relation-set public_key="$public_key"
    relation-set private_key="$private_key"

    # re-read keys that they are the same everywhere
    public_key=`relation-get public-key`
    private_key=`relation-get private-key`
  fi

  for sdir in /root/.ssh /var/lib/nova/.ssh ; do
    # place public key
    mkdir -p $sdir
    echo "$public_key" > $sdir/id_rsa.pub
    chmod 644 $sdir/id_rsa.pub

    # place private key
    echo "$private_key" > $sdir/id_rsa
    chmod 600 $sdir/id_rsa

    # add public key to authorized_keys
    file=$sdir/authorized_keys
    if [[ ! -f $file ]] ; then
      touch $file
      chmod 600 $file
    fi
    key=`echo $public_key | awk '{print $2}'`
    if [[ -n "$key" && ! $(grep $key $file) ]] ; then
      echo "$public_key" >> $file
    fi

    # create .ssh/config
    # TODO: make this smarter - do not overwrite current config if exists
    echo "Host *" > $sdir/config
    echo "  StrictHostKeyChecking no" >> $sdir/config
  done

  # set another shell for nova user
  usermod -s /bin/bash nova
  # update owner
  chown -R nova:nova /var/lib/nova/.ssh

  # change compute config
  ini_set live_migration_uri "qemu+ssh://%s/system"
}


manage_keys=`config-get manage-keys`
if [[ "$manage_keys" =~ [Tt][Rr][Uu][Ee] ]]; then
  apply_keys
fi

server-cmd "class { 'scaleio_openstack::nova':
  gateway_password => '$password', gateway_ip => '$remote_ip',
  protection_domains => '$protection_domains', storage_pools => '$storage_pools'
}"
server-cmd "class { 'scaleio_openstack::cinder':
  gateway_password => '$password', gateway_ip => '$remote_ip',
  protection_domains => '$protection_domains', storage_pools => '$storage_pools'
}"

log-relation "ScaleIO GW joined"
